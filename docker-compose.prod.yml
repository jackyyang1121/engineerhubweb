version: '3.8'

services:
  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: engineerhub_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - frontend_build:/usr/share/nginx/html
      - django_static:/app/static
      - django_media:/app/media
    depends_on:
      - backend
    networks:
      - engineerhub_network
    restart: unless-stopped

  # Django 後端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: engineerhub_backend
    environment:
      - DJANGO_SETTINGS_MODULE=engineerhub.settings.production
      - DATABASE_URL=postgresql://engineerhub:${DB_PASSWORD}@postgres:5432/engineerhub
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    volumes:
      - django_static:/app/static
      - django_media:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - engineerhub_network
    restart: unless-stopped
    command: >
      sh -c "
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        gunicorn engineerhub.wsgi:application --bind 0.0.0.0:8000 --workers 4
      "

  # Daphne WebSocket 服務器
  daphne:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: engineerhub_daphne
    environment:
      - DJANGO_SETTINGS_MODULE=engineerhub.settings.production
      - DATABASE_URL=postgresql://engineerhub:${DB_PASSWORD}@postgres:5432/engineerhub
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - engineerhub_network
    restart: unless-stopped
    command: daphne -b 0.0.0.0 -p 8001 engineerhub.asgi:application

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: engineerhub_celery_worker
    environment:
      - DJANGO_SETTINGS_MODULE=engineerhub.settings.production
      - DATABASE_URL=postgresql://engineerhub:${DB_PASSWORD}@postgres:5432/engineerhub
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - engineerhub_network
    restart: unless-stopped
    command: celery -A engineerhub worker -l info

  # Celery Beat
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: engineerhub_celery_beat
    environment:
      - DJANGO_SETTINGS_MODULE=engineerhub.settings.production
      - DATABASE_URL=postgresql://engineerhub:${DB_PASSWORD}@postgres:5432/engineerhub
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - engineerhub_network
    restart: unless-stopped
    command: celery -A engineerhub beat -l info

  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: engineerhub_postgres
    environment:
      - POSTGRES_DB=engineerhub
      - POSTGRES_USER=engineerhub
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - engineerhub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U engineerhub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 快取
  redis:
    image: redis:7-alpine
    container_name: engineerhub_redis
    volumes:
      - redis_data:/data
    networks:
      - engineerhub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  django_static:
  django_media:
  frontend_build:

networks:
  engineerhub_network:
    driver: bridge