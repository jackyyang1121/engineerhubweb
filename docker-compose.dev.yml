services:
  postgres:
    image: postgres:15-alpine
    container_name: engineerhub_postgres
    environment:
      POSTGRES_DB: engineerhub
      POSTGRES_USER: engineerhub_user
      POSTGRES_PASSWORD: 123456789
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U engineerhub_user -d engineerhub"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - engineerhub_network

  redis:
    image: redis:7-alpine
    container_name: engineerhub_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - engineerhub_network

  django:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: engineerhub_django
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=engineerhub.settings.development
      - DB_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - engineerhub_network
    command: python manage.py runserver 0.0.0.0:8000

  adminer:
    image: adminer:latest
    container_name: engineerhub_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: hydra
      ADMINER_PLUGINS: tables-filter tinymce
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - engineerhub_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  engineerhub_network:
    driver: bridge 