# Generated by Django 5.2.1 on 2025-05-24 10:02

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='用戶唯一標識符', primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='用戶郵箱地址，用於登入', max_length=254, unique=True)),
                ('username', models.CharField(help_text='用戶名，用於@提及和URL', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='用戶名只能包含字母、數字和下劃線', regex='^[a-zA-Z0-9_]+$')])),
                ('bio', models.TextField(blank=True, help_text='個人簡介', max_length=500)),
                ('avatar', models.ImageField(blank=True, help_text='用戶頭像', null=True, upload_to='avatars/%Y/%m/')),
                ('location', models.CharField(blank=True, help_text='所在地', max_length=100)),
                ('website', models.URLField(blank=True, help_text='個人網站')),
                ('github_url', models.URLField(blank=True, help_text='GitHub 個人頁面')),
                ('skill_tags', models.JSONField(blank=True, default=list, help_text="技能標籤列表，如 ['Python', 'Django', 'React']")),
                ('is_online', models.BooleanField(default=False, help_text='是否在線')),
                ('last_online', models.DateTimeField(auto_now=True, help_text='最後在線時間')),
                ('is_verified', models.BooleanField(default=False, help_text='是否已驗證用戶')),
                ('is_private', models.BooleanField(default=False, help_text='是否為私人帳戶')),
                ('hide_online_status', models.BooleanField(default=False, help_text='是否隱藏在線狀態')),
                ('followers_count', models.PositiveIntegerField(default=0, help_text='關注者數量')),
                ('following_count', models.PositiveIntegerField(default=0, help_text='關注數量')),
                ('posts_count', models.PositiveIntegerField(default=0, help_text='貼文數量')),
                ('likes_received_count', models.PositiveIntegerField(default=0, help_text='收到的點讚數量')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新時間')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用戶',
                'verbose_name_plural': '用戶',
                'db_table': 'accounts_user',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, help_text='拉黑原因', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='拉黑時間')),
                ('blocked', models.ForeignKey(help_text='被拉黑者', on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by', to=settings.AUTH_USER_MODEL)),
                ('blocker', models.ForeignKey(help_text='拉黑者', on_delete=django.db.models.deletion.CASCADE, related_name='blocking', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '黑名單',
                'verbose_name_plural': '黑名單',
                'db_table': 'accounts_blocked_user',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='關注時間')),
                ('follower', models.ForeignKey(help_text='關注者', on_delete=django.db.models.deletion.CASCADE, related_name='following_set', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(help_text='被關注者', on_delete=django.db.models.deletion.CASCADE, related_name='followers_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '關注關係',
                'verbose_name_plural': '關注關係',
                'db_table': 'accounts_follow',
            },
        ),
        migrations.CreateModel(
            name='PortfolioProject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='項目標題', max_length=200)),
                ('description', models.TextField(help_text='項目描述')),
                ('image', models.ImageField(blank=True, help_text='項目封面圖片', null=True, upload_to='portfolio/%Y/%m/')),
                ('project_url', models.URLField(blank=True, help_text='項目演示網址')),
                ('github_url', models.URLField(blank=True, help_text='GitHub 倉庫地址')),
                ('youtube_url', models.URLField(blank=True, help_text='YouTube 演示視頻')),
                ('technologies', models.JSONField(default=list, help_text="使用的技術棧，如 ['React', 'Node.js', 'MongoDB']")),
                ('is_featured', models.BooleanField(default=False, help_text='是否為精選項目')),
                ('order', models.PositiveIntegerField(default=0, help_text='顯示順序')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新時間')),
                ('user', models.ForeignKey(help_text='作品所有者', on_delete=django.db.models.deletion.CASCADE, related_name='portfolio_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '作品集項目',
                'verbose_name_plural': '作品集項目',
                'db_table': 'accounts_portfolio_project',
                'ordering': ['-is_featured', 'order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True, help_text='是否接收郵件通知')),
                ('push_notifications', models.BooleanField(default=True, help_text='是否接收推送通知')),
                ('notification_new_follower', models.BooleanField(default=True, help_text='新關注者通知')),
                ('notification_post_like', models.BooleanField(default=True, help_text='貼文點讚通知')),
                ('notification_post_comment', models.BooleanField(default=True, help_text='貼文評論通知')),
                ('notification_comment_reply', models.BooleanField(default=True, help_text='評論回覆通知')),
                ('notification_mention', models.BooleanField(default=True, help_text='提及通知')),
                ('notification_new_message', models.BooleanField(default=True, help_text='新私信通知')),
                ('profile_visibility', models.CharField(choices=[('public', '公開'), ('followers', '僅關注者'), ('private', '私人')], default='public', help_text='個人資料可見性', max_length=20)),
                ('show_online_status', models.BooleanField(default=True, help_text='是否顯示在線狀態')),
                ('allow_mentions', models.BooleanField(default=True, help_text='是否允許被提及')),
                ('theme', models.CharField(choices=[('light', '淺色主題'), ('dark', '深色主題'), ('auto', '跟隨系統')], default='auto', help_text='主題偏好', max_length=10)),
                ('language', models.CharField(choices=[('zh-hant', '繁體中文'), ('zh-hans', '簡體中文'), ('en', 'English')], default='zh-hant', help_text='語言偏好', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='創建時間')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='更新時間')),
                ('user', models.OneToOneField(help_text='設置所有者', on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用戶設置',
                'verbose_name_plural': '用戶設置',
                'db_table': 'accounts_user_settings',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='accounts_us_email_74c8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='accounts_us_usernam_c0ea66_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_online'], name='accounts_us_is_onli_a6442c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='accounts_us_created_4734df_idx'),
        ),
        migrations.AddIndex(
            model_name='blockeduser',
            index=models.Index(fields=['blocker'], name='accounts_bl_blocker_68f129_idx'),
        ),
        migrations.AddIndex(
            model_name='blockeduser',
            index=models.Index(fields=['blocked'], name='accounts_bl_blocked_8cb0f0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blockeduser',
            unique_together={('blocker', 'blocked')},
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['follower', 'created_at'], name='accounts_fo_followe_6d6ab4_idx'),
        ),
        migrations.AddIndex(
            model_name='follow',
            index=models.Index(fields=['following', 'created_at'], name='accounts_fo_followi_60a153_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('follower', 'following')},
        ),
        migrations.AddIndex(
            model_name='portfolioproject',
            index=models.Index(fields=['user', 'is_featured'], name='accounts_po_user_id_354963_idx'),
        ),
        migrations.AddIndex(
            model_name='portfolioproject',
            index=models.Index(fields=['user', 'order'], name='accounts_po_user_id_03e7ed_idx'),
        ),
    ]
